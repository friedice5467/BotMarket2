@inject ISnackbar Snackbar
@using BotMarket2.Client.Models.Backtest
@using MudBlazor

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Backtest Settings</MudText>
    </TitleContent>
    <DialogContent>
        <MudSelect T="AggregationMode" Label="Select Aggregation Mode" @bind-Value="selectedMode">
            @foreach (AggregationMode mode in Enum.GetValues(typeof(AggregationMode)))
            {
                <MudSelectItem Value="mode">@mode.ToString()</MudSelectItem>
            }
        </MudSelect>
        @if (selectedMode == AggregationMode.SignalConfirmation)
        {
            <MudNumericField T="int" Label="Confirmation Threshold" @bind-Value="confirmationThreshold" />
        }
        <MudGrid>

            <MudItem lg="4">
                <MudNumericField T="decimal" @bind-Value="initialInvestment" Label="Initial Investment" />
            </MudItem>
            <MudItem lg="4">
                <MudNumericField T="decimal" @bind-Value="targetProfitPercentage" Label="Max Investment" />
            </MudItem>
            <MudItem lg="4">
                <MudNumericField T="decimal" @bind-Value="buyPercentage" Label="Min Investment" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="ApplySettings">Apply</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public BotMarket2.Client.Models.Backtest.Backtest Backtest { get; set; }
    [Parameter]
    public EventCallback<PortfolioManager> OnSettingsApplied { get; set; }
    [Parameter]
    public PortfolioManager PortfolioManager { get; set; }
    private AggregationMode selectedMode;
    private int confirmationThreshold;

    private decimal initialInvestment;
    private decimal targetProfitPercentage;
    private decimal buyPercentage;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void ApplySettings()
    {
        if (Backtest != null)
        {
            Backtest.ConfigureAggregationSettings(selectedMode, confirmationThreshold);
            Snackbar.Add("Settings applied successfully.", Severity.Success);
            PortfolioManager manager = new PortfolioManager(initialInvestment, targetProfitPercentage, buyPercentage);
            OnSettingsApplied.InvokeAsync(manager);
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    protected override void OnInitialized()
    {
        if (Backtest != null)
        {
            selectedMode = Backtest.AggregationMode;
            confirmationThreshold = Backtest.ConfirmationThreshold;
        }
        if(PortfolioManager != null)
        {
            initialInvestment = PortfolioManager.InitialInvestment;
            targetProfitPercentage = PortfolioManager.TargetProfitPercentage;
            buyPercentage = PortfolioManager.BuyPercentage;
        }
    }
}
