@page "/stock"
@using BotMarket2.Client.Repositories.StockData
@using BotMarket2.Shared.DTO
@using ApexCharts
@inject IStockDataRepo _stockDataRepo
@inject NavigationManager NavManager

<PageTitle>Stock Sim</PageTitle>

<MudContainer Class="h-100 pt-4">
    @if (_stockData.Count == 0)
    {
        <MudProgressCircular Color="MudBlazor.Color.Primary" Style="height:7rem; width: 7rem;" Indeterminate="true" />
    }
    else
    {
        <MudItem xs="12" Style="height: 25%;">
            <ApexChart TItem="HistoricalStockDataDTO" Title="MSFT Price History"
                       XAxisType="XAxisType.Datetime"
                       Options="mainChartOptions"
                       Height="@("100%")">
                <ApexPointSeries TItem="HistoricalStockDataDTO"
                                 Items="_stockData"
                                 SeriesType="SeriesType.Area"
                                 Name="Close Price"
                                 XValue="@(item => item.Date)"
                                 YValue="@(item => item.CloseLast)" />
            </ApexChart>
        </MudItem>
        <MudItem xs="12" Class="pt-2">
            <MudSelect T="string" MultiSelection="true" Label="Select Indicators" SelectedValues="SelectedValues" SelectedValuesChanged="@(async val => await OnSelectedValuesChangedAsync(val))">
                @foreach (var item in _selectMap.Keys)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" Style="@($"height: 25%;")">
            <ApexChart TItem="HistoricalStockDataDTO" Title="MSFT Volume History"
                       XAxisType="XAxisType.Datetime"
                       Options="volumeChartOptions"
                       Height="@("100%")"
                       OnBrushScrolled="@BrushScrolled"
                       OnMounted="@(async val => await RefreshYValuesAsync(true))"
                       @ref="@volumeChartRef">

                @foreach(var val in _selectMap)
                {
                    if(!val.Value) continue;

                    switch(val.Key)
                    {
                        case "SMA":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Line"
                                             Name="SMA"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.SMA)" />
                            break;
                        case "EMA":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Line"
                                             Name="EMA"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.EMA)" />
                            break;
                        case "MACD":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Area"
                                             Name="MACD"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.MACD)"
                                             PointColor="@(item => MACDColor(item))" />
                            break;
                        case "RSI":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Line"
                                             Name="RSI"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.RSI)" />
                            break;
                        case "Bollinger Band Upper":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Line"
                                             Name="Bollinger Band Upper"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.BollingerBandUpper)" />
                            break;
                        case "Bollinger Band Lower":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Line"
                                             Name="Bollinger Band Lower"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => (decimal?)item.BollingerBandLower)" />
                            break;
                        case "Volume":
                            <ApexPointSeries TItem="HistoricalStockDataDTO"
                                             Items="_stockData"
                                             SeriesType="SeriesType.Bar"
                                             Name="Volume"
                                             XValue="@(item => item.Date)"
                                             YValue="@(item => item.Volume)" />
                            break;
                    }
                }
            </ApexChart>
        </MudItem>
    }
</MudContainer>

@code {
    private List<HistoricalStockDataDTO> _stockData = new();
    private ApexChartOptions<HistoricalStockDataDTO> mainChartOptions = new ApexChartOptions<HistoricalStockDataDTO>();
    private ApexChartOptions<HistoricalStockDataDTO> volumeChartOptions = new ApexChartOptions<HistoricalStockDataDTO>();
    private ApexChart<HistoricalStockDataDTO> volumeChartRef;
    private bool _initState = false;
    private DateTimeOffset XMin;
    private DateTimeOffset XMax;
    private Dictionary<string, bool> _selectMap = new()
    {
        { "SMA", true },
        { "EMA", true },
        { "MACD", true },
        { "RSI", true },
        { "Bollinger Band Upper", true },
        {  "Bollinger Band Lower", true },
        {  "Volume", true}
    };

    private IEnumerable<string> SelectedValues => _selectMap.Where(x => x.Value).Select(x => x.Key);

    protected override async Task OnInitializedAsync()
    {
        _stockData = (await _stockDataRepo.GetStockData("MSFT", 1)).ToList();
        ConfigureChartOptions();
    }

    private void ConfigureChartOptions()
    {
        const string mainChartId = "mainChart";

        mainChartOptions.Chart = new ApexCharts.Chart
            {
                Id = mainChartId,
                Toolbar = new Toolbar
                {
                    Tools = new Tools { Zoomin = false, Zoomout = false },

                }
            };
        mainChartOptions.Tooltip = new Tooltip
            {
                X = new TooltipX
                {
                    Format = "dd MMM"
                }
            };
        mainChartOptions.Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Format = "dd MMM"
                }
            };
        mainChartOptions.Yaxis = new List<YAxis>();
        mainChartOptions.Yaxis.Add(new YAxis
            {
                Labels = new YAxisLabels
                {
                    Formatter = @"function (value) {
                    return '$' + Number(value).toLocaleString();}"
                }
            }
        );
        mainChartOptions.PlotOptions = new PlotOptions { Area = new PlotOptionsArea { FillTo = AreaFillTo.Origin } };

        volumeChartOptions.Chart = new ApexCharts.Chart
            {
                Id = "volumeChart",
                Brush = new ApexCharts.Brush
                {
                    Enabled = true,
                    Target = mainChartId
                },
                Selection = new ApexCharts.Selection
                {
                    Enabled = true,
                    Xaxis = new ApexCharts.SelectionXaxis
                    {
                        Min = _stockData.Min(d => d.Date).ToUnixTimeMilliseconds(),
                        Max = _stockData.Max(d => d.Date).ToUnixTimeMilliseconds()
                    }
                },

            };
        volumeChartOptions.Tooltip = new Tooltip
            {
                X = new TooltipX
                {
                    Format = "dd MMM"
                }
            };
        volumeChartOptions.Xaxis = new XAxis
            {
                Labels = new XAxisLabels
                {
                    Format = "dd MMM"
                }
            };
    }

    private async Task OnSelectedValuesChangedAsync(IEnumerable<string> selectedValues)
    {
        foreach (var key in _selectMap.Keys.ToList())
        {
            _selectMap[key] = selectedValues.Contains(key);
        }
        await RefreshYValuesAsync();
    }

    private async Task RefreshYValuesAsync(bool? isInit = false)
    {
        if (_initState) return;

        if (isInit == true)
        {
            _initState = true;
        }

        var newYAxes = new List<YAxis>();

        void AddYAxisIfSelected(string seriesName, string title, bool opposite = false, bool show = true)
        {
            if (_selectMap[seriesName])
            {
                var yAxis = new YAxis
                    {
                        SeriesName = seriesName,
                        Title = new AxisTitle { Text = title },
                        DecimalsInFloat = opposite ? 0 : 2,
                        Opposite = opposite,
                        Show = show
                    };

                newYAxes.Add(yAxis);
            }
        }

        AddYAxisIfSelected( "SMA", "SMA", true, false);
        AddYAxisIfSelected( "EMA", "EMA", true, false);
        AddYAxisIfSelected("MACD", "MACD");
        AddYAxisIfSelected( "RSI", "RSI");
        AddYAxisIfSelected( "Bollinger Band Upper", "Bollinger Band Upper", true);
        AddYAxisIfSelected( "Bollinger Band Lower", "Bollinger Band Lower", true);
        AddYAxisIfSelected("Volume", "Volume", false, false);
        volumeChartOptions.Yaxis = new();
        foreach(var yAxis in newYAxes)
        {
            volumeChartOptions.Yaxis.Add(yAxis);
        }

        await volumeChartRef.UpdateOptionsAsync(true, true, true);
        await volumeChartRef.RenderAsync();
    }

    private string MACDColor(HistoricalStockDataDTO item)
    {
        if (item.MACD > 0)
        {
            return "green";
        }
        else
        {
           return "red";
        }
    }

    private void BrushScrolled(SelectionData<HistoricalStockDataDTO> selection)
    {
        var min = selection?.XAxis?.Min;
        if (min != null)
        {
            XMin = DateTimeOffset.FromUnixTimeMilliseconds((long)min);
        }

        var max = selection?.XAxis?.Max;
        if (max != null)
        {
            XMax = DateTimeOffset.FromUnixTimeMilliseconds((long)max);
        }
        StateHasChanged();
    }
}
