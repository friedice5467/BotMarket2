@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@if(!_isStatic)
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@DrawerToggle" id="drawer-toggle" />
            <MudSpacer />
            <AuthorizeView>
                <Authorized>
                    <MudAvatar @onclick="ToggleUserMenu" Color="Color.Primary" Style="cursor: pointer;">
                        @GetInitials(@context.User.Identity?.Name)
                        <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" @bind-Open="_userMenuOpen">
                            <MudMenuItem Href="Account/Manage">Profile</MudMenuItem>
                            <MudMenuItem>
                                <form action="Account/Logout" method="post">
                                    <AntiforgeryToken />
                                    <input type="hidden" name="ReturnUrl" value="@_currentUrl" />
                                    <button type="submit" class="mud-button mud-button-text">
                                        <MudIcon Icon="@Icons.Material.Filled.ExitToApp" /> Logout
                                    </button>
                                </form>
                            </MudMenuItem>
                        </MudMenu>
                    </MudAvatar>

                </Authorized>
                <NotAuthorized>
                    <MudAvatar Icon="@Icons.Material.Filled.AccountCircle" @onclick="ToggleUserMenu" Style="cursor: pointer;">
                        <MudMenu Dense="true" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" @bind-Open="_userMenuOpen">
                            <MudItem>
                                <NavLink class="nav-link" href="Account/Login">
                                    <MudIcon Icon="@Icons.Material.Filled.Login" /> Login
                                </NavLink>
                            </MudItem>
                            <MudItem>
                                <NavLink class="nav-link" href="Account/Register">
                                    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" /> Register
                                </NavLink>
                            </MudItem>
                        </MudMenu>
                    </MudAvatar>
                </NotAuthorized>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
            <MudDrawerHeader>
                <MudText Typo="Typo.h5" Class="mt-1">BotMarket2</MudText>
            </MudDrawerHeader>
            <NavMenu  IsStatic="@_isStatic"/>
        </MudDrawer>
        <MudMainContent>
            <div class="content px-4">
                @Body
            </div>
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudLayout>
        <MudAppBar Elevation="1">
            <NavMenu IsStatic="@_isStatic" />
        </MudAppBar>
        <MudMainContent>
            <div class="content px-4">
                @Body
            </div>
        </MudMainContent>
    </MudLayout>
}

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool _drawerOpen;
    private bool _userMenuOpen;
    private bool _isStatic = true;
    private string _currentUrl = string.Empty;

    protected override void OnInitialized()
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        _isStatic = _currentUrl.Contains("Account");
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        _isStatic = _currentUrl.Contains("Account");
        StateHasChanged();
    }

    async void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ToggleUserMenu()
    {
        _userMenuOpen = !_userMenuOpen;
    }

    string GetInitials(string fullName)
    {
        return string.IsNullOrEmpty(fullName) ? "A" : fullName[0].ToString().ToUpper();
    }
}
